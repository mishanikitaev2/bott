import os
import logging
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackContext, 
    CallbackQueryHandler, MessageHandler, filters,
    ConversationHandler
)
from docx import Document
import tempfile
import shutil
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==== –ü–û–õ–£–ß–ê–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò–ó .env ====
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMINS_STRING = os.getenv('ADMINS', '')  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –∞–¥–º–∏–Ω–æ–≤

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∞–¥–º–∏–Ω–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
ADMINS = []
if ADMINS_STRING:
    try:
        ADMINS = [int(admin_id.strip()) for admin_id in ADMINS_STRING.split(',')]
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ADMINS: {e}")
        ADMINS = []

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –∏ –∞–¥–º–∏–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

if not ADMINS:
    print("‚ùå ADMINS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

print(f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {'*' * 10}{BOT_TOKEN[-5:]}")
print(f"‚úÖ –ê–¥–º–∏–Ω—ã: {ADMINS}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_CATEGORY, SELECTING_TEMPLATES, FILLING_DATA = range(3)

# –°–¢–†–£–ö–¢–£–†–ê –ö–ê–¢–ï–ì–û–†–ò–ô –ò –®–ê–ë–õ–û–ù–û–í
CATEGORIES = {
    "–û–ú–°": {
        "–û–ú–°": "–û–ú–°.docx"
    },
    "–í–ú–ü": {
        "–í–ú–ü_–≤—ã–ø–∏—Å–∫–∞": "–í–ú–ü_–≤—ã–ø–∏—Å–∫–∞.docx",
        "–í–ú–ü_–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "–í–ú–ü_–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.docx", 
        "–í–ú–ü_–ø—Ä–æ—Ç–æ–∫–æ–ª": "–í–ú–ü_–ø—Ä–æ—Ç–æ–∫–æ–ª.docx"
    },
    "–í–ú–ü –≤ –û–ú–°": {
        "–í–ú–ü_–û–ú–°_–≤—ã–ø–∏—Å–∫–∞": "–í–ú–ü_–û–ú–°_–≤—ã–ø–∏—Å–∫–∞.docx",
        "–í–ú–ü_–û–ú–°_–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "–í–ú–ü_–û–ú–°_–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.docx",
        "–í–ú–ü_–û–ú–°_–ø—Ä–æ—Ç–æ–∫–æ–ª": "–í–ú–ü_–û–ú–°_–ø—Ä–æ—Ç–æ–∫–æ–ª.docx"
    }
}

def analyze_docx_template(template_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç .docx —à–∞–±–ª–æ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å"""
    try:
        if not os.path.exists(template_path):
            print(f"‚ùå –§–∞–π–ª {template_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []
        
        doc = Document(template_path)
        fields = []
        
        # –ò—â–µ–º –ø–æ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {field_name} –≤–æ –≤—Å–µ—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö
        for paragraph in doc.paragraphs:
            found_fields = re.findall(r'\{(.*?)\}', paragraph.text)
            for field in found_fields:
                # –ò–°–ö–õ–Æ–ß–ê–ï–ú –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å
                if field not in ['hist_number', 'current_date'] and field not in fields:
                    fields.append(field)
        
        # –ò—â–µ–º –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    found_fields = re.findall(r'\{(.*?)\}', cell.text)
                    for field in found_fields:
                        # –ò–°–ö–õ–Æ–ß–ê–ï–ú –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å
                        if field not in ['hist_number', 'current_date'] and field not in fields:
                            fields.append(field)
        
        print(f"‚úÖ –í —à–∞–±–ª–æ–Ω–µ {template_path} –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è: {fields}")
        return fields
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —à–∞–±–ª–æ–Ω–∞ {template_path}: {e}")
        return []

def get_required_fields(selected_templates, category):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ü–û–†–Ø–î–ö–ï –ò–ó –î–û–ö–£–ú–ï–ù–¢–û–í"""
    all_fields = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—è –∏–∑ –í–°–ï–• —à–∞–±–ª–æ–Ω–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
    for template_name in CATEGORIES[category].keys():
        template_file = CATEGORIES[category][template_name]
        template_path = f"templates/{template_file}"
        fields = analyze_docx_template(template_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —É–±–∏—Ä–∞—è –¥—É–±–ª–∏
        for field in fields:
            if field not in all_fields:
                all_fields.append(field)
    
    # –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –í–´–ë–†–ê–ù–ù–´–• —à–∞–±–ª–æ–Ω–∞—Ö
    final_fields = []
    selected_fields_set = set()
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
    for template_name in selected_templates:
        template_file = CATEGORIES[category][template_name]
        template_path = f"templates/{template_file}"
        fields = analyze_docx_template(template_path)
        selected_fields_set.update(fields)
    
    # –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑ all_fields, –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    for field in all_fields:
        if field in selected_fields_set:
            final_fields.append(field)
    
    # –û–°–û–ë–´–ô –ü–û–†–Ø–î–û–ö: –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–¥—Ä–µ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if "address_fact" in final_fields and "address" in final_fields:
        address_index = final_fields.index("address")
        # –£–¥–∞–ª—è–µ–º address_fact –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        final_fields.remove("address_fact")
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ address
        final_fields.insert(address_index + 1, "address_fact")
    
    print(f"üìã –í—Å–µ–≥–æ –ø–æ–ª–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {len(final_fields)}")
    print(f"üìã –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π: {final_fields}")
    return final_fields

def get_user_input_fields(required_fields):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    AUTO_FILLED_FIELDS = ["sop_diagnosis", "main_diagnosis"]
    
    user_fields = []
    for field in required_fields:
        if field not in AUTO_FILLED_FIELDS:
            user_fields.append(field)
    
    print(f"üéØ –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {len(user_fields)} –∏–∑ {len(required_fields)}")
    print(f"üéØ –°–ø–∏—Å–æ–∫: {user_fields}")
    return user_fields

async def start(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_id not in ADMINS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = []
    for category_name in CATEGORIES.keys():
        keyboard.append([InlineKeyboardButton(category_name, callback_data=f"category_{category_name}")])
    keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="restart")])
    
    await update.message.reply_text(
        "üè• –í—ã–±–µ—Ä–∏ —Ç–∏–ø –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏:\n\n"
        "‚Ä¢ –û–ú–° - –±–∞–∑–æ–≤—ã–π –ø–æ–ª–∏—Å\n"
        "‚Ä¢ –í–ú–ü - –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–∞—è –ø–æ–º–æ—â—å\n"  
        "‚Ä¢ –í–ú–ü –≤ –û–ú–° - –í–ú–ü –ø–æ –ø–æ–ª–∏—Å—É\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SELECTING_CATEGORY

async def handle_category_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    
    if query.data == "restart":
        await query.edit_message_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        context.user_data.clear()
        return await start_from_query(query, context)
    
    if query.data.startswith("category_"):
        category = query.data.replace("category_", "")
        context.user_data['category'] = category
        context.user_data['selected_templates'] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard = []
        templates = CATEGORIES[category]
        
        for template_name in templates.keys():
            keyboard.append([InlineKeyboardButton(template_name, callback_data=template_name)])
        
        keyboard.append([InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")])
        keyboard.append([InlineKeyboardButton("üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
        keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")])
        
        category_descriptions = {
            "–û–ú–°": "üìÑ –ë–∞–∑–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –ø–æ–ª–∏—Å—É –û–ú–°",
            "–í–ú–ü": "üî¨ –í—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å", 
            "–í–ú–ü –≤ –û–ú–°": "üíä –í–ú–ü –≤ —Ä–∞–º–∫–∞—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è"
        }
        
        await query.edit_message_text(
            f"{category_descriptions.get(category, category)}\n\n"
            "üìã –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n"
            "‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã\n"
            "‚Ä¢ –û–Ω–∏ –≤—ã–¥–µ–ª—è—Ç—Å—è –≥–∞–ª–æ—á–∫–æ–π\n"  
            "‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É –∏–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ö–æ–≥–¥–∞ –≤—ã–±—Ä–∞–ª –Ω—É–∂–Ω—ã–µ - –∂–º–∏ 'üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return SELECTING_TEMPLATES
    
    return SELECTING_CATEGORY

async def handle_template_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó MARKDOWN"""
    query = update.callback_query
    await query.answer()
    
    print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    
    if query.data == "back_to_categories":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard = []
        for category_name in CATEGORIES.keys():
            keyboard.append([InlineKeyboardButton(category_name, callback_data=f"category_{category_name}")])
        keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="restart")])
        
        await query.edit_message_text(
            "üè• –í—ã–±–µ—Ä–∏ —Ç–∏–ø –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏:\n\n"
            "‚Ä¢ –û–ú–° - –±–∞–∑–æ–≤—ã–π –ø–æ–ª–∏—Å\n"
            "‚Ä¢ –í–ú–ü - –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–∞—è –ø–æ–º–æ—â—å\n"  
            "‚Ä¢ –í–ú–ü –≤ –û–ú–° - –í–ú–ü –ø–æ –ø–æ–ª–∏—Å—É\n\n"
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECTING_CATEGORY
    
    if query.data == "restart":
        await query.edit_message_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        context.user_data.clear()
        return await start_from_query(query, context)
    
    if query.data == "select_all":
        category = context.user_data.get('category')
        if category:
            selected = list(CATEGORIES[category].keys())
            context.user_data['selected_templates'] = selected
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
            keyboard = []
            templates = CATEGORIES[category]
            
            for template_name in templates.keys():
                keyboard.append([InlineKeyboardButton(f"‚úÖ {template_name}", callback_data=template_name)])
            
            keyboard.append([InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")])
            keyboard.append([InlineKeyboardButton("üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")])
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
            keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")])
            
            await query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω—ã –í–°–ï –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è {category}:\n"
                f"üìù {', '.join(selected)}\n\n"
                f"–ù–∞–∂–º–∏ 'üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SELECTING_TEMPLATES
    
    if query.data == "continue":
        selected = context.user_data.get('selected_templates', [])
        category = context.user_data.get('category')
        
        print(f"üéØ –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –Ω–∞–∂–∞—Ç–∞. –í—ã–±—Ä–∞–Ω–æ: {selected}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        
        if not selected:
            await query.answer("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç!", show_alert=True)
            return SELECTING_TEMPLATES
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_text –≤–º–µ—Å—Ç–æ edit_message_text –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(selected)}\n"
            f"üìù {', '.join(selected)}\n\n"
            f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö..."
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω—É–∂–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        required_fields = get_required_fields(selected, category)
        
        if not required_fields:
            await context.bot.send_message(
                query.message.chat.id,
                "‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö –Ω–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!\n"
                "–ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.\n\n"
                "–ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
            )
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_input_fields = get_user_input_fields(required_fields)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ —Å–ø–∏—Å–∫–∞
        context.user_data['required_fields'] = required_fields  # –í—Å–µ –ø–æ–ª—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        context.user_data['user_input_fields'] = user_input_fields  # –¢–æ–ª—å–∫–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        context.user_data['current_field_index'] = 0
        context.user_data['field_history'] = []  # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        await ask_next_question(context, query.message.chat.id)
        return FILLING_DATA
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã —à–∞–±–ª–æ–Ω–æ–≤
    category = context.user_data.get('category')
    if not category:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞–∂–º–∏ /start")
        return ConversationHandler.END
    
    selected = context.user_data.get('selected_templates', [])
    template_name = query.data
    
    if template_name in selected:
        selected.remove(template_name)
        print(f"‚ûñ –£–±—Ä–∞–ª–∏ —à–∞–±–ª–æ–Ω: {template_name}")
    else:
        selected.append(template_name)
        print(f"‚ûï –î–æ–±–∞–≤–∏–ª–∏ —à–∞–±–ª–æ–Ω: {template_name}")
    
    context.user_data['selected_templates'] = selected
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏
    keyboard = []
    templates = CATEGORIES[category]
    
    for template_name in templates.keys():
        emoji = "‚úÖ" if template_name in selected else "‚óªÔ∏è"
        keyboard.append([InlineKeyboardButton(f"{emoji} {template_name}", callback_data=template_name)])
    
    keyboard.append([InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")])
    keyboard.append([InlineKeyboardButton("üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")])
    
    await query.edit_message_text(
        f"üìã –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n"
        f"‚Ä¢ –í—ã–±—Ä–∞–Ω–æ: {len(selected)}/{len(templates)}\n"
        f"‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã\n" 
        f"‚Ä¢ –û–Ω–∏ –≤—ã–¥–µ–ª—è—Ç—Å—è –≥–∞–ª–æ—á–∫–æ–π\n"
        f"‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É –∏–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏\n"
        f"‚Ä¢ –ö–æ–≥–¥–∞ –≤—ã–±—Ä–∞–ª –Ω—É–∂–Ω—ã–µ - –∂–º–∏ 'üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SELECTING_TEMPLATES

async def start_from_query(query, context):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑ callback query"""
    keyboard = []
    for category_name in CATEGORIES.keys():
        keyboard.append([InlineKeyboardButton(category_name, callback_data=f"category_{category_name}")])
    keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="restart")])
    
    await query.message.reply_text(
        "üè• –í—ã–±–µ—Ä–∏ —Ç–∏–ø –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏:\n\n"
        "‚Ä¢ –û–ú–° - –±–∞–∑–æ–≤—ã–π –ø–æ–ª–∏—Å\n"
        "‚Ä¢ –í–ú–ü - –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–∞—è –ø–æ–º–æ—â—å\n"  
        "‚Ä¢ –í–ú–ü –≤ –û–ú–° - –í–ú–ü –ø–æ –ø–æ–ª–∏—Å—É\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SELECTING_CATEGORY

async def ask_next_question(context: CallbackContext, chat_id: int):
    """–ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ user_input_fields"""
    field_index = context.user_data['current_field_index']
    user_input_fields = context.user_data['user_input_fields']
    
    # –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
    if field_index >= len(user_input_fields):
        print("‚úÖ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        await generate_documents(context, chat_id)
        return ConversationHandler.END
    
    print(f"üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ {field_index + 1}/{len(user_input_fields)}: {user_input_fields[field_index]}")
    
    field_name = user_input_fields[field_index]
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    field_display_names = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        "name": "üë§ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞",
        "birth_date": "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)",
        "address": "üìç –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
        "address_fact": "üè† –ê–¥—Ä–µ—Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
        
        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        "oms": "üìã –ù–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞ –û–ú–°",
        "snils": "üìò –°–ù–ò–õ–°",
        
        # –î–∏–∞–≥–Ω–æ–∑—ã
        "diagnosis": "üè• –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –¥–∏–∞–≥–Ω–æ–∑",
        "diagnosis_code": "üî¢ –ö–æ–¥ –ø–æ –ú–ö–ë-10",
        
        # –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        "medical_history": "üìã Anamnesis morbi",
        "status_localis": "üìä Status localis",
        
        # –í–ú–ü –¥–∞–Ω–Ω—ã–µ
        "wmp": "üî¨ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∏–¥–∞ –í–ú–ü",
        "wmp_oms": "üíä –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∏–¥–∞ –í–ú–ü –≤ –û–ú–°",
        "wmp_group": "üìÅ ‚Ññ –≥—Ä—É–ø–ø—ã –í–ú–ü",
        "wmp_code": "üî¢ –ö–æ–¥ –≤–∏–¥–∞ –í–ú–ü",
        "wmp_oms_group": "üìÇ ‚Ññ –≥—Ä—É–ø–ø—ã –í–ú–ü –≤ –û–ú–°", 
        "wmp_oms_code": "üî£ –ö–æ–¥ –≤–∏–¥–∞ –í–ú–ü –≤ –û–ú–°",
        "patient_model": "üë• –ú–æ–¥–µ–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞",
        "treatment_method": "üíâ –ú–µ—Ç–æ–¥ –ª–µ—á–µ–Ω–∏—è –í–ú–ü",
        
        # –û–ú–° –¥–∞–Ω–Ω—ã–µ
        "ksg_group": "üìä –ì—Ä—É–ø–ø–∞ –ö–°–ì",
        "operation_code": "üî™ –ö–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏",
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏—è
        "recommendations": "üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ / –†–µ—à–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏",
        
        # –í—Ä–∞—á–∏
        "doctor": "üë®‚Äç‚öïÔ∏è –§–ò–û –≤—Ä–∞—á–∞",
        "fio_lech": "üë©‚Äç‚öïÔ∏è –§–ò–û –ª–µ—á–∞—â–µ–≥–æ –≤—Ä–∞—á–∞ (–¥–ª—è –ø–æ–¥–ø–∏—Å–∏)",
        "department": "üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ"
    }
    
    question = field_display_names.get(field_name, f"üìù {field_name}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress = f"({field_index + 1}/{len(user_input_fields)})"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
    keyboard = []
    if field_index > 0:  # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª–µ", callback_data="back_to_previous")])
    
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_templates"),
        InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")
    ])
    
    await context.bot.send_message(
        chat_id, 
        f"{progress} {question}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_user_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ò–ó–ú–ï–ù–ï–ù–û: –≤—Å–µ –¥–∏–∞–≥–Ω–æ–∑—ã = –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –¥–∏–∞–≥–Ω–æ–∑"""
    user_input = update.message.text
    field_index = context.user_data['current_field_index']
    user_input_fields = context.user_data['user_input_fields']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    field_name = user_input_fields[field_index]
    context.user_data[field_name] = user_input
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º "diagnosis" (–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –¥–∏–∞–≥–Ω–æ–∑), 
    # —Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –í–°–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã —Ç–µ–º –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º
    if field_name == "diagnosis":
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è –¥–∏–∞–≥–Ω–æ–∑–æ–≤
        context.user_data["sop_diagnosis"] = user_input  # —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–π
        context.user_data["main_diagnosis"] = user_input  # –æ—Å–Ω–æ–≤–Ω–æ–π
        print(f"üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –¥–∏–∞–≥–Ω–æ–∑—ã: {user_input}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
    if 'field_history' not in context.user_data:
        context.user_data['field_history'] = []
    
    context.user_data['field_history'].append({
        'field_name': field_name,
        'value': user_input,
        'index': field_index
    })
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ª–µ {field_name}: {user_input}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
    context.user_data['current_field_index'] += 1
    await ask_next_question(context, update.effective_chat.id)
    
    return FILLING_DATA

async def handle_navigation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    print(f"üîò –ù–∞–∂–∞—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {query.data}")
    
    if query.data == "back_to_previous":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ–ª—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        current_index = context.user_data.get('current_field_index', 0)
        if current_index > 0:
            context.user_data['current_field_index'] = current_index - 1
            
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            if context.user_data.get('field_history'):
                context.user_data['field_history'].pop()
            
            await query.edit_message_text("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ–ª—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
            await ask_next_question(context, query.message.chat.id)
            return FILLING_DATA
        else:
            await query.answer("‚ùå –≠—Ç–æ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ, –Ω–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", show_alert=True)
            return FILLING_DATA
    
    elif query.data == "back_to_templates":
        category = context.user_data.get('category')
        if category:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–æ–≤
            keyboard = []
            templates = CATEGORIES[category]
            selected = context.user_data.get('selected_templates', [])
            
            for template_name in templates.keys():
                emoji = "‚úÖ" if template_name in selected else "‚óªÔ∏è"
                keyboard.append([InlineKeyboardButton(f"{emoji} {template_name}", callback_data=template_name)])
            
            keyboard.append([InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")])
            keyboard.append([InlineKeyboardButton("üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")])
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
            keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")])
            
            await query.edit_message_text(
                f"üìã –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n"
                f"‚Ä¢ –í—ã–±—Ä–∞–Ω–æ: {len(selected)}/{len(templates)}\n"
                f"‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã\n" 
                f"‚Ä¢ –û–Ω–∏ –≤—ã–¥–µ–ª—è—Ç—Å—è –≥–∞–ª–æ—á–∫–æ–π\n"
                f"‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É –∏–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏\n"
                f"‚Ä¢ –ö–æ–≥–¥–∞ –≤—ã–±—Ä–∞–ª –Ω—É–∂–Ω—ã–µ - –∂–º–∏ 'üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SELECTING_TEMPLATES
    
    elif query.data == "restart":
        await query.edit_message_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        context.user_data.clear()
        return await start_from_query(query, context)
    
    return FILLING_DATA

def replace_in_paragraph(paragraph, data):
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    for key, value in data.items():
        placeholder = f"{{{key}}}"
        if placeholder in paragraph.text:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å
            original_runs = paragraph.runs
            if original_runs:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–≤–æ–≥–æ run
                first_run = original_runs[0]
                original_bold = first_run.bold
                original_italic = first_run.italic
                original_underline = first_run.underline
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à—Ä–∏—Ñ—Ç –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                try:
                    original_font_name = first_run.font.name
                    original_font_size = first_run.font.size
                except:
                    original_font_name = None
                    original_font_size = None
            else:
                original_bold = None
                original_italic = None
                original_underline = None
                original_font_name = None
                original_font_size = None
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
            paragraph.text = paragraph.text.replace(placeholder, str(value))
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
            if paragraph.runs:
                run = paragraph.runs[0]
                if original_bold is not None:
                    run.bold = original_bold
                if original_italic is not None:
                    run.italic = original_italic
                if original_underline is not None:
                    run.underline = original_underline
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
                try:
                    if original_font_name:
                        run.font.name = original_font_name
                    if original_font_size:
                        run.font.size = original_font_size
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —à—Ä–∏—Ñ—Ç–∞

def fill_docx_template(template_path, data):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç .docx —à–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
        doc = Document(template_path)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö
        for paragraph in doc.paragraphs:
            replace_in_paragraph(paragraph, data)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for paragraph in cell.paragraphs:
                        replace_in_paragraph(paragraph, data)
        
        return doc
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {template_path}: {e}")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        doc = Document()
        doc.add_heading('–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –î–û–ö–£–ú–ï–ù–¢', 0)
        for key, value in data.items():
            doc.add_paragraph(f"{key}: {value}")
        return doc

async def generate_documents(context: CallbackContext, chat_id: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Word –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user_data = context.user_data
    selected_templates = user_data.get('selected_templates', [])
    category = user_data.get('category')
    
    if not selected_templates or not category:
        await context.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã —à–∞–±–ª–æ–Ω—ã –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        return ConversationHandler.END
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    data = {}
    required_fields = user_data.get('required_fields', [])
    for field in required_fields:
        data[field] = user_data.get(field, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –í–°–ï –¥–∏–∞–≥–Ω–æ–∑—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–º
    if "diagnosis" in data:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã
        data["sop_diagnosis"] = data["diagnosis"]  # —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–π
        data["main_diagnosis"] = data["diagnosis"]  # –æ—Å–Ω–æ–≤–Ω–æ–π
        print(f"üí° –í—Å–µ –¥–∏–∞–≥–Ω–æ–∑—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞–≤–Ω—ã–º–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–º—É: {data['diagnosis']}")
    
    print(f"üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è {category}: {selected_templates}")
    
    temp_dir = tempfile.mkdtemp()
    
    try:
        generated_files = []
        
        for template_name in selected_templates:
            template_file = CATEGORIES[category][template_name]
            template_path = f"templates/{template_file}"
            
            safe_template_name = re.sub(r'[^\w\s-]', '', template_name)
            safe_template_name = safe_template_name.replace(' ', '_')
            
            if not os.path.exists(template_path):
                doc = Document()
                doc.add_heading(template_name, 0)
                for key, value in data.items():
                    doc.add_paragraph(f"{key}: {value}")
            else:
                doc = fill_docx_template(template_path, data)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{safe_template_name}_{timestamp}.docx"
            file_path = os.path.join(temp_dir, filename)
            doc.save(file_path)
            generated_files.append((template_name, file_path))
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {file_path}")
        
        if generated_files:
            await context.bot.send_message(chat_id, "üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
            
            for template_name, file_path in generated_files:
                safe_display_name = re.sub(r'[^\w\s-]', '', template_name)
                
                with open(file_path, 'rb') as doc_file:
                    await context.bot.send_document(
                        chat_id=chat_id,
                        document=doc_file,
                        filename=f"{safe_display_name}.docx",
                        caption=f"‚úÖ {template_name}"
                    )
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
            
            shutil.rmtree(temp_dir)
            print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="restart")]
            ]
            
            await context.bot.send_message(
                chat_id,
                "üéâ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!\n\n"
                "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n\n"
                "–î–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await context.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await context.bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
        
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
    
    finally:
        context.user_data.clear()

async def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start"
    )
    return ConversationHandler.END

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if not BOT_TOKEN or not ADMINS:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞!")
        return
    
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é —à–∞–±–ª–æ–Ω—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
    for category, templates in CATEGORIES.items():
        print(f"\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        for template_name, template_file in templates.items():
            template_path = f"templates/{template_file}"
            if os.path.exists(template_path):
                fields = analyze_docx_template(template_path)
                print(f"   ‚úÖ {template_name}: {len(fields)} –ø–æ–ª–µ–π")
            else:
                print(f"   ‚ùå {template_name}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_CATEGORY: [
                CallbackQueryHandler(handle_category_selection)
            ],
            SELECTING_TEMPLATES: [
                CallbackQueryHandler(handle_template_selection)
            ],
            FILLING_DATA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_input),
                CallbackQueryHandler(handle_navigation)
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('start', start)
        ]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(CommandHandler("start", start))
    
    print("\n‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –¢–µ–ª–µ–≥—Ä–∞–º -> /start")
    print("‚èπÔ∏è  Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    application.run_polling()

if __name__ == '__main__':
    main()
